generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/.prisma/client"
}

// Run 'prisma generate' command to generate the Prisma client after schema changes

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
  GUIDE
  MANAGER
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role     @default(USER)
  phone         String?
  accounts                 Account[]
  sessions                 Session[]
  bookings                 Booking[]
  reviews                  Review[]
  memories                 UserMemory[]
  preferences              UserPreference?
  loyaltyPoints            LoyaltyPoint[]
  loyaltyActions           LoyaltyAction[]
  wishlist                 WishlistItem[]
  toursGuided              Tour[]                @relation("TourGuides")
  blogs                    Blog[]
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  preferredLanguage   String   @default("en")
  currency           String   @default("USD")
  notifications      Boolean  @default(true)
  marketingEmails    Boolean  @default(false)
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model UserMemory {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  date        DateTime?
  location    String?
  isPublic    Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tour {
  id                  String    @id @default(cuid())
  title               String
  slug                String    @unique
  description         String    @db.Text
  duration            Int
  maxGroupSize        Int
  difficulty          String
  price               Float
  priceDiscount       Float?
  ratingsAverage      Float     @default(0)
  ratingsQuantity     Int       @default(0)
  summary             String    @db.Text
  imageCover          String
  images              String[]
  startDates          DateTime[]
  secretTour          Boolean   @default(false)
  startLocation       Json      // GeoJSON Point
  locations           Json[]    // Array of GeoJSON Points
  guides              User[]    @relation("TourGuides")
  reviews             Review[]
  bookings            Booking[]
  wishlistItems       WishlistItem[]
  categories          Category[] @relation("TourCategories")
  tags                Tag[]      @relation("TourTags")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  tours       Tour[]    @relation("TourCategories")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  tours     Tour[]   @relation("TourTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  review     String   @db.Text
  rating     Int      @default(5)
  tourId     String
  userId     String
  tour       Tour     @relation(fields: [tourId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tourId, userId])
}

model Booking {
  id          String   @id @default(cuid())
  tourId      String
  userId      String
  price       Float
  startDate   DateTime
  endDate     DateTime
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  paymentStatus String  @default("pending") // pending, paid, refunded, failed
  paymentMethod String?
  tour        Tour     @relation(fields: [tourId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  tourId    String
  user      User     @relation(fields: [userId], references: [id])
  tour      Tour     @relation(fields: [tourId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tourId])
}

model LoyaltyPoint {
  id          String   @id @default(cuid())
  userId      String
  points      Int
  description String
  expiresAt   DateTime?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoyaltyAction {
  id          String   @id @default(cuid())
  userId      String
  action      String
  points      Int
  description String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model PageContent {
  id          String   @id @default(cuid())
  key         String   @unique
  title       String
  content     String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryImage {
  id          String   @id @default(cuid())
  url         String
  title       String?
  description String?   @db.Text
  isFeatured  Boolean   @default(false)
  order       Int       @default(0)
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ChatConversation {
  id                String    @id @default(cuid())
  sessionId         String
  userMessage       String    @db.Text
  assistantResponse String    @db.Text
  createdAt         DateTime  @default(now())
  metadata          Json?

  @@index([sessionId])
  @@index([createdAt])
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String
  websiteUrl  String
  description String?   @db.Text
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WebsiteContent {
  id          String   @id @default(cuid())
  key         String   @unique
  title       String
  content     String?  @db.Text
  mediaUrl    String?
  contentType String   @default("TEXT") // TEXT, IMAGE, VIDEO, RICH_TEXT, etc.
  page        String?  // Which page this content belongs to
  section     String?  // Section within the page
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([page])
  @@index([section])
  @@index([key])
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  category    String   @default("general") // general, email, sms, whatsapp, payment, etc.
  description String?
  isPublic    Boolean  @default(false) // Whether setting can be accessed publicly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([key])
}

model TravelService {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String   @db.Text
  summary     String?  @db.Text
  serviceType String   // accommodation, transport, guide, activity, etc.
  price       Float?
  duration    Int?     // in minutes
  imageCover  String?
  images      String[]
  features    String[]
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  metadata    Json?    // Additional service details
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([serviceType])
  @@index([isActive])
}

model Destination {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  country     String   @default("Egypt")
  region      String?
  coordinates Json?    // { lat: number, lng: number }
  imageCover  String?
  images      String[]
  highlights  String[]
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  metadata    Json?    // Additional destination details
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([country])
}

model Package {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String   @db.Text
  shortDescription  String?
  price             Float
  discountPrice     Float?
  duration          Int      // in days
  destination       String
  mainImage         String?
  images            String[]
  includes          String[]
  excludes          String[]
  itinerary         Json?    // Detailed day-by-day itinerary
  category          String?  // luxury, adventure, cultural, family, etc.
  maxGroupSize      Int?
  difficulty        String?  // easy, moderate, challenging
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  order             Int      @default(0)
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
  @@index([isFeatured])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?  @db.Text
  coverImage  String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  category    String?
  tags        String[]
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([authorId])
  @@index([isPublished])
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  email       String?
  country     String?
  rating      Int      @default(5)
  content     String   @db.Text
  tourName    String?
  travelDate  DateTime?
  image       String?
  isApproved  Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isApproved])
  @@index([isFeatured])
}

model Inquiry {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  country     String?
  subject     String?
  message     String   @db.Text
  inquiryType String   @default("general") // general, booking, custom, complaint
  status      String   @default("new") // new, in-progress, resolved, closed
  assignedTo  String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([inquiryType])
  @@index([email])
}

model Dahabiya {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  summary     String?  @db.Text
  capacity    Int
  cabins      Int
  crew        Int?
  length      Float?   // in meters
  imageCover  String?
  images      String[]
  amenities   String[]
  features    Json?    // Detailed features
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?  @db.Text
  duration    Int      // in days
  days        Json     // Array of day-by-day details
  tourType    String?  // cruise, land, mixed
  destination String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
}

model Availability {
  id          String   @id @default(cuid())
  resourceId  String   // ID of tour, package, dahabiya, etc.
  resourceType String  // tour, package, dahabiya, etc.
  date        DateTime
  slotsTotal  Int
  slotsBooked Int      @default(0)
  isAvailable Boolean  @default(true)
  price       Float?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resourceId, resourceType, date])
  @@index([resourceId, resourceType])
  @@index([date])
}

